import sys

if (sys.version_info > (3, 0)):
    from queue import Queue, Empty
else:
    from Queue import Queue, Empty

from sys import argv
from time import sleep
import platform

print(platform.node())
if platform.node() == 'raspberrypi':
    from dronekit import connect, Command, VehicleMode
    from pymavlink import mavutil
else:
    from Simulation.Drone import connect, Command, VehicleMode, mavutil

from clientserver import *
from detection import *

class Drone:

    def __init__(self, port):
        self.queue = Queue()
        self.receiv = server(port, self.queue)
        self.sender = server(port+1, self.queue)
        self.waypoints = []
        self.vehicle = connect('/dev/ttyACM0', wait_ready=True)
        self.vehicle.home_location = self.vehicle.location.global_frame
        # SPEED PARAMETERS
        self.vehicle.airspeed = 0.7

        # Set groundspeed using attribute
        self.vehicle.groundspeed = 2

        self.detector = Detector(self.queue)
        # Arming
        '''
        while not self.vehicle.is_armable:
            print(" Waiting for vehicle to initialise...")
            sleep(1)
        '''
        self.vehicle.mode = VehicleMode("GUIDED")
        self.vehicle.armed = True
        '''
        while not self.vehicle.armed:
            print(" Waiting for arming...")
            sleep(1)
        '''

        self.vehicle.commands.clear()

    def arm_and_takeoff(self, aTargetAltitude):
        """
        Arms vehicle and fly to aTargetAltitude.
        """

        print( "Basic pre-arm checks")
        # Don't try to arm until autopilot is ready
        while not self.vehicle.is_armable:
            print( " Waiting for vehicle to initialise...")
            sleep(1)

        print( "Arming motors")
        # Copter should arm in GUIDED mode
        self.vehicle.mode    = VehicleMode("GUIDED")
        self.vehicle.armed   = True

        # Confirm vehicle armed before attempting to take off
        while not self.vehicle.armed:
            print( "Waiting for arming...")
            sleep(1)

        print( "Taking off!")
        self.vehicle.simple_takeoff(aTargetAltitude) # Take off to target altitude

        # Wait until the vehicle reaches a safe height before processing the goto (otherwise the command
        # after Vehicle.simple_takeoff will execute immediately).
        while True:
            print( " Altitude: ", self.vehicle.location.global_relative_frame.alt)
            #Break and return from function just below target altitude.
            if self.vehicle.location.global_relative_frame.alt>=aTargetAltitude*0.95:
                print( "Reached target altitude")
                break
            sleep(1)

    def run(self):
        self.receiv.start()
        self.sender.start()
        self.detector.start()
        while 1:
            sleep(1)

            # Reading queue
            try:
                msg = self.queue.get_nowait()
                self.parse_receiv(msg)
                if "STOP" in msg:
                    break
            except Empty:
                # GPS SENDING
                print("Send GPS...")
                pos = self.get_gps()
                print(pos)
                self.sender.send_text("GPS" + str(pos[0]) + ";" + str(pos[1]))
                pass


    def start_mission(self):
        self.vehicle.commands.clear()
        self.vehicle.commands.upload()
        self.vehicle.commands.download()
        self.vehicle.commands.wait_ready()

        if len(self.waypoints) != 0:
            for wp in self.waypoints:
                cmd=Command( 0, 0, 0, mavutil.mavlink.MAV_FRAME_GLOBAL_RELATIVE_ALT, mavutil.mavlink.MAV_CMD_NAV_TAKEOFF, 0, 0, 0, 0, 0, 0, wp[0], wp[1], 7)
                self.vehicle.commands.add(cmd)
            self.vehicle.commands.upload()

            self.arm_and_takeoff(7)
            self.vehicle.commands.next = 0
            self.vehicle.mode    = VehicleMode("AUTO")

    def stop(self):
        print("Stopping process...")
        self.vehicle.close()
        self.receiv.end()
        self.sender.end()
        self.detector.stop = True
        self.vehicle.armed = False

    def parse_receiv(self, data):
        print("Data received: %s"%data)
        if(data.startswith("GPS")):
            pos = self.get_gps()
            gps_string = str(pos[0]) + ";" + str(pos[1])
            self.sender.send_text("GPS" + gps_string)
        elif(data.startswith("STOP")):
            self.stop()
        elif(data.startswith("ADDWAY")):
            wp = stringtowaypoint(data[6:])
            if wp is not None:
                self.waypoints.append(wp)
        elif(data.startswith("DETECT")):
            pos = self.get_gps()
            gps_string = str(pos[0]) + ";" + str(pos[1])
            self.sender.send_text(data+gps_string)
        elif(data.startswith("GO")):
            self.start_mission()

    def get_gps(self):
        return [self.vehicle.location.global_frame.lat, self.vehicle.location.global_frame.lon]

def stringtowaypoint(str):
    coord = str.split(';')
    if len(coord) == 2:
        return [float(coord[0]), float(coord[1])]
    else:
        return None


if __name__ == "__main__":
    drone = Drone(int(argv[1]))
    print("Drone initialized")
    drone.run()
